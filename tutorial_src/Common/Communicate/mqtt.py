#Hardware Platform: FireBeetle-ESP32#Result: input MQTTlibrary and remote controls LED by mqtt communication.from umqtt.simple import MQTTClientfrom machine import Pinimport networkimport timeSSID="yourSSID"PASSWORD="yourPASSWD"led=Pin(2, Pin.OUT, value=0)SERVER = "182.254.130.180"CLIENT_ID = "yourClientID"TOPIC = b"yourTOPIC"username='yourIotUserName'password='yourIotPassword'state = 0
c=Nonedef sub_cb(topic, msg):  global state  print((topic, msg))  if msg == b"on":    led.value(1)    state = 0    print("1")  elif msg == b"off":    led.value(0)    state = 1    print("0")  elif msg == b"toggle":    # LED is inversed, so setting it to current state    # value will make it toggle    led.value(state)    state = 1 - statedef connectWifi(ssid,passwd):  global wlan  wlan=network.WLAN(network.STA_IF)         #create a wlan object  wlan.active(True)                         #Activate the network interface  wlan.disconnect()                         #Disconnect the last connected WiFi  wlan.connect(ssid,passwd)                 #connect wifi  while(wlan.ifconfig()[0]=='0.0.0.0'):    time.sleep(1)    #Catch exceptions,stop program if interrupted accidentally in the 'try'try:  connectWifi(SSID,PASSWORD)  server=SERVER  c = MQTTClient(CLIENT_ID, server,0,username,password)     #create a mqtt client  c.set_callback(sub_cb)                    #set callback  c.connect()                               #connect mqtt  c.subscribe(TOPIC)                        #client subscribes to a topic  print("Connected to %s, subscribed to %s topic" % (server, TOPIC))
  while True:    c.wait_msg()                            #wait message finally:
  if(c is not None):    c.disconnect()
  wlan.disconnect()
  wlan.active(False)